{"version":3,"sources":["ChartData.ts","shared/BirthdayPicker.tsx","shared/MainLayout.tsx","Spotify.ts","Home.tsx","SpotifyLoggedIn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NoDataReason","useChartData","useState","chartData","setChartData","useEffect","a","fetch","then","response","json","incomingEntries","map","entry","firstWeekEndDate","DateTime","fromISO","first_week_ending_date","title","artist","weeksAtNumberOne","Number","weeks_at_number_one","data","fetchData","findBirthdayNumberOnes","birthdayDate","Interval","fromDateTimes","fromJSDate","local","splitBy","years","interval","findBirthdayNumberOne","start","birthday","chartEntryBeforeBirthday","findLast","minus","days","undefined","date","numberOne","reason","DATE_TOO_OLD","length","plus","weeks","NO_DATA_YET","SubmitButton","styled","button","Container","div","BirthdayPicker","props","selectedDate","Date","setBirthdayDate","selected","onChange","dateFormat","minDate","maxDate","showMonthDropdown","showYearDropdown","dropdownMode","disabled","onClick","onDateSelect","CenteredContainer","PaddedCenteredContainer","MainLayout","children","SpotifyAuthUrl","state","callbackUrl","window","location","origin","SpotifySearchUrl","SpotifyProfileUrl","searchTrack","accessToken","firstArtist","split","queryParameters","URLSearchParams","q","type","limit","toString","headers","Authorization","tracks","items","createPlaylist","playlistName","birthdays","token","user","playlistDetails","name","description","userId","id","method","body","JSON","stringify","playlist","trackUris","compact","b","spotifyTrack","uri","playlistId","uris","external_urls","spotify","NumberOnesList","birthdayNumberOnes","birthdayEntry","Result","key","toLocaleString","Home","setSelectedDate","href","toISOString","ErrorDisplay","error","message","NumberOnesDisplay","callbackParams","spotifyData","setSpotifyData","entries","Promise","resolve","track","all","useSpotifyData","numberOnes","SpotifyTrackData","CreatePlaylistDisplay","loading","setLoading","playlistUrl","setPlaylistUrl","onCreatePlaylist","toLocaleDateString","url","TrackList","TrackSpotifyDetails","SpotifyTrackInfo","src","album","images","find","img","height","alt","artists","join","CouldNotFindTrack","SpotifyLoggedIn","hashParams","urlParams","useLocation","pathname","slice","errorParam","get","Error","expiresIn","useSpotifyHashParams","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.88748d9c.chunk.js","sourcesContent":["import { findLast } from \"lodash\";\nimport { DateTime, Interval } from \"luxon\";\nimport { useState, useEffect } from \"react\";\n\nconst JsonBinUrl = \"https://api.jsonbin.io/b/5ecfe1657741ef56a5638007/latest\";\n\ntype IncomingChartEntry = {\n  first_week_ending_date: string;\n  title: string;\n  artist: string;\n  weeks_at_number_one: string;\n};\n\nexport interface ChartEntry {\n  firstWeekEndDate: DateTime;\n  title: string;\n  artist: string;\n  weeksAtNumberOne: number;\n}\n\nexport type ChartData = Array<ChartEntry>;\n\nexport const getChartData: () => Promise<ChartData> = () =>\n  fetch(JsonBinUrl)\n    .then((response) => response.json())\n    .then((incomingEntries) =>\n      incomingEntries.map((entry: IncomingChartEntry) => ({\n        firstWeekEndDate: DateTime.fromISO(entry.first_week_ending_date),\n        title: entry.title,\n        artist: entry.artist,\n        weeksAtNumberOne: Number(entry.weeks_at_number_one),\n      }))\n    );\n\nexport const useChartData = () => {\n  const [chartData, setChartData] = useState<ChartData | null>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await getChartData();\n      setChartData(data);\n    };\n    fetchData();\n  }, []);\n  return chartData;\n};\n\nexport type BirthdayNumberOnes = Array<Birthday>;\n\nexport type Birthday = {\n  date: DateTime;\n  numberOne: ChartEntry | null;\n  reason: NoDataReason | null;\n};\n\nexport enum NoDataReason {\n  NO_DATA_YET,\n  DATE_TOO_OLD,\n}\n\nexport const findBirthdayNumberOnes = (\n  birthdayDate: Date,\n  chartData: ChartData\n): BirthdayNumberOnes =>\n  Interval.fromDateTimes(DateTime.fromJSDate(birthdayDate), DateTime.local())\n    .splitBy({ years: 1 })\n    .map((interval) => findBirthdayNumberOne(interval.start, chartData));\n\nexport const findBirthdayNumberOne = (\n  birthday: DateTime,\n  chartData: ChartData\n): Birthday => {\n  const chartEntryBeforeBirthday = findLast(\n    chartData,\n    (entry) => entry.firstWeekEndDate.minus({ days: 6 }) <= birthday // Date is last day of first week, so subtract 6 days to get beginning\n  );\n  if (chartEntryBeforeBirthday === undefined) {\n    return {\n      date: birthday,\n      numberOne: null,\n      reason: NoDataReason.DATE_TOO_OLD,\n    };\n  } else if (\n    // if entry is final entry\n    chartEntryBeforeBirthday === chartData[chartData.length - 1] &&\n    // and birthday is past chart start plus weeks at number one\n    birthday >=\n      chartEntryBeforeBirthday.firstWeekEndDate.plus({\n        weeks: chartEntryBeforeBirthday.weeksAtNumberOne,\n        days: -6,\n      })\n  ) {\n    return {\n      date: birthday,\n      numberOne: null,\n      reason: NoDataReason.NO_DATA_YET,\n    };\n  } else {\n    return {\n      date: birthday,\n      numberOne: chartEntryBeforeBirthday,\n      reason: null,\n    };\n  }\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DatePicker from \"react-datepicker\";\n\ntype Props = {\n  disabled: boolean;\n  onDateSelect: (date: Date) => void;\n  selectedDate?: Date;\n};\n\nconst BirthdayPicker = (props: Props) => {\n  const [birthdayDate, setBirthdayDate] = useState(\n    props.selectedDate ? props.selectedDate : new Date()\n  );\n\n  return (\n    <Container>\n      <h3>Enter your birthday below:</h3>\n      <DatePicker\n        selected={birthdayDate}\n        onChange={(date) =>\n          date ? setBirthdayDate(date) : setBirthdayDate(new Date())\n        }\n        dateFormat=\"dd/MM/yyyy\"\n        minDate={new Date(1900, 0, 1)}\n        maxDate={new Date()}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n      />\n      <SubmitButton\n        disabled={props.disabled}\n        onClick={() => props.onDateSelect(birthdayDate)}\n      >\n        Find me a playlist\n      </SubmitButton>\n    </Container>\n  );\n};\n\nconst SubmitButton = styled.button`\n  margin: 10px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nexport default BirthdayPicker;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst MainLayout: FunctionComponent = (props) => (\n  <PaddedCenteredContainer>\n    <h1>Birthday Playlist Generator</h1>\n    <p>\n      Generate a Spotify playlist of UK number ones on your Birthday since you\n      were born. This site is a work in progress.\n    </p>\n    {props.children}\n  </PaddedCenteredContainer>\n);\n\nexport const CenteredContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const PaddedCenteredContainer = styled(CenteredContainer)`\n  padding: 20px;\n`;\n\nexport default MainLayout;\n","import { useEffect, useState } from \"react\";\nimport { Birthday, ChartData, findBirthdayNumberOnes } from \"./ChartData\";\nimport { compact } from \"lodash\";\n\nexport const SpotifyAuthUrl = (state: string) => {\n  const callbackUrl = window.location.origin;\n  return `https://accounts.spotify.com/authorize?client_id=6c0a042391fa42e8ac96a5eed4306dfe&redirect_uri=${callbackUrl}&scope=playlist-modify-public&response_type=token&state=${state}`;\n};\n\nconst SpotifyApiBaseUrl = \"https://api.spotify.com/v1\";\nconst SpotifySearchUrl = `${SpotifyApiBaseUrl}/search`;\nconst SpotifyProfileUrl = `${SpotifyApiBaseUrl}/me`;\nconst SpotifyPlaylistCreateUrl = (userId: string) =>\n  `${SpotifyApiBaseUrl}/users/${userId}/playlists`;\nconst SpotifyPlaylistAddTracksUrl = (playlistId: string) =>\n  `${SpotifyApiBaseUrl}/playlists/${playlistId}/tracks`;\n\nexport type SpotifyTrack = {\n  album: SpotifyAlbum;\n  artists: Array<SpotifyArtist>;\n  id: string;\n  name: string;\n  uri: string;\n};\n\ntype SpotifyAlbum = {\n  name: string;\n  images: Array<SpotifyAlbumImage>;\n};\n\ntype SpotifyAlbumImage = {\n  height: number;\n  Width: number;\n  url: string;\n};\n\ntype SpotifyArtist = {\n  name: string;\n};\n\nexport type BirthdayWithSpotifyData = {\n  birthday: Birthday;\n  spotifyTrack: SpotifyTrack | null;\n};\n\nconst searchTrack = async (\n  title: string,\n  artist: string,\n  accessToken: string\n): Promise<SpotifyTrack | null> => {\n  const firstArtist = artist.split(/ FT. |\\//)[0];\n  const queryParameters = new URLSearchParams({\n    q: `\"${title}\" \"${firstArtist}\"`,\n    type: \"track\",\n    limit: \"1\",\n  });\n  const response = await fetch(\n    `${SpotifySearchUrl}?${queryParameters.toString()}`,\n    {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    }\n  );\n  const json = await response.json();\n  return json.tracks.items.length > 0 ? json.tracks.items[0] : null;\n};\n\nexport const useSpotifyData = (\n  chartData: ChartData | null,\n  selectedDate: Date,\n  token: string\n) => {\n  const [spotifyData, setSpotifyData] = useState<Array<\n    BirthdayWithSpotifyData\n  > | null>(null);\n\n  useEffect(() => {\n    if (chartData == null) {\n      return;\n    }\n    const birthdayNumberOnes = findBirthdayNumberOnes(selectedDate, chartData);\n    const fetchData = async () => {\n      const entries: Array<Promise<\n        BirthdayWithSpotifyData\n      >> = birthdayNumberOnes.map(async (birthdayEntry) => {\n        if (birthdayEntry.numberOne == null) {\n          return Promise.resolve({\n            birthday: birthdayEntry,\n            spotifyTrack: null,\n          });\n        }\n        const track = await searchTrack(\n          birthdayEntry.numberOne.title,\n          birthdayEntry.numberOne.artist,\n          token\n        );\n        return { birthday: birthdayEntry, spotifyTrack: track };\n      });\n      const data = await Promise.all(entries);\n      setSpotifyData(data);\n    };\n    fetchData();\n  }, [chartData, selectedDate, token]);\n  return spotifyData;\n};\n\ntype SpotifyUser = {\n  id: string;\n};\n\ntype SpotifyPlaylist = {\n  id: string;\n  external_urls: { spotify: string };\n};\n\nexport const createPlaylist = async (\n  playlistName: string,\n  birthdays: Array<BirthdayWithSpotifyData>,\n  token: string\n) => {\n  const user: SpotifyUser = await fetch(SpotifyProfileUrl, {\n    headers: { Authorization: `Bearer ${token}` },\n  }).then((response) => response.json());\n  const playlistDetails = {\n    name: playlistName,\n    description:\n      \"Playlist of Birthday UK Number One singles created via https://playlist.mattmarch.co.uk\",\n  };\n  const playlist: SpotifyPlaylist = await fetch(\n    SpotifyPlaylistCreateUrl(user.id),\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(playlistDetails),\n    }\n  ).then((response) => response.json());\n  const trackUris = compact(birthdays.map((b) => b.spotifyTrack?.uri));\n  await fetch(SpotifyPlaylistAddTracksUrl(playlist.id), {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ uris: trackUris }),\n  });\n  return playlist.external_urls.spotify\n};\n","import React, { useState } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styled from \"styled-components\";\nimport {\n  BirthdayNumberOnes,\n  findBirthdayNumberOnes,\n  NoDataReason,\n  useChartData,\n} from \"./ChartData\";\nimport BirthdayPicker from \"./shared/BirthdayPicker\";\nimport MainLayout, { CenteredContainer } from \"./shared/MainLayout\";\nimport { SpotifyAuthUrl } from \"./Spotify\";\n\nconst Home = () => {\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const chartData = useChartData();\n  const birthdayNumberOnes =\n    chartData != null && selectedDate != null\n      ? findBirthdayNumberOnes(selectedDate, chartData)\n      : null;\n\n  return (\n    <MainLayout>\n      <BirthdayPicker\n        disabled={chartData == null}\n        onDateSelect={setSelectedDate}\n      />\n      {birthdayNumberOnes && selectedDate && (\n        <CenteredContainer>\n          <a href={SpotifyAuthUrl(selectedDate.toISOString())}>\n            Connect with Spotify for more track information and the option to\n            automatically create a playlist.\n          </a>\n          <NumberOnesList birthdayNumberOnes={birthdayNumberOnes} />\n        </CenteredContainer>\n      )}\n    </MainLayout>\n  );\n};\n\nconst NumberOnesList = (props: { birthdayNumberOnes: BirthdayNumberOnes }) => (\n  <div>\n    {props.birthdayNumberOnes.map((birthdayEntry) => (\n      <Result key={birthdayEntry.date.toLocaleString()}>\n        <h4>{birthdayEntry.date.toLocaleString()}</h4>\n        {birthdayEntry.numberOne ? (\n          <p>\n            {birthdayEntry.numberOne.title} by {birthdayEntry.numberOne.artist}\n          </p>\n        ) : birthdayEntry.reason === NoDataReason.DATE_TOO_OLD ? (\n          <p>UK Charts only started on 08/11/1952</p>\n        ) : (\n          <p>The latest chart data hasn't been updated yet, try again soon!</p>\n        )}\n      </Result>\n    ))}\n  </div>\n);\n\nconst Result = styled.div`\n  text-align: center;\n`;\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ChartEntry, NoDataReason, useChartData } from \"./ChartData\";\nimport BirthdayPicker from \"./shared/BirthdayPicker\";\nimport MainLayout, { CenteredContainer } from \"./shared/MainLayout\";\nimport {\n  BirthdayWithSpotifyData,\n  SpotifyAuthUrl,\n  SpotifyTrack,\n  useSpotifyData,\n  createPlaylist,\n} from \"./Spotify\";\n\nconst useSpotifyHashParams = (): SuccessCallbackParams | Error => {\n  const urlParams = new URLSearchParams(useLocation().pathname.slice(1));\n  const errorParam = urlParams.get(\"error\");\n  if (errorParam != null) {\n    return new Error(`Spotify authorization failed, error was: ${errorParam}`);\n  }\n  const accessToken = urlParams.get(\"access_token\");\n  const expiresIn = Number(urlParams.get(\"expires_in\"));\n  const state = urlParams.get(\"state\");\n  return accessToken != null && expiresIn > 0 && state != null\n    ? {\n        accessToken,\n        state,\n      }\n    : new Error(\"Response from Spotify was missing key return parameters\");\n};\n\nconst SpotifyLoggedIn = () => {\n  const hashParams = useSpotifyHashParams();\n  return (\n    <MainLayout>\n      {hashParams instanceof Error ? (\n        <ErrorDisplay error={hashParams} />\n      ) : (\n        <NumberOnesDisplay callbackParams={hashParams} />\n      )}\n    </MainLayout>\n  );\n};\n\nconst ErrorDisplay = (props: { error: Error }) => (\n  <CenteredContainer>\n    <h3>Error</h3>\n    <p>An error occurred during authorization with spotify.</p>\n    <a href={SpotifyAuthUrl(new Date().toISOString())}>Click to try again.</a>\n    <p>\n      If this problem persists{\" \"}\n      <a href=\"mailto:playlist@mattmarch.co.uk\">let me know</a>.\n    </p>\n    <p>Error reason: {props.error.message}</p>\n  </CenteredContainer>\n);\n\nconst NumberOnesDisplay = (props: {\n  callbackParams: SuccessCallbackParams;\n}) => {\n  const [selectedDate, setSelectedDate] = useState(\n    new Date(props.callbackParams.state)\n  );\n  const chartData = useChartData();\n  const spotifyData = useSpotifyData(\n    chartData,\n    selectedDate,\n    props.callbackParams.accessToken\n  );\n  return (\n    <CenteredContainer>\n      <p>You are now logged in with Spotify.</p>\n      <BirthdayPicker\n        selectedDate={selectedDate}\n        disabled={chartData == null}\n        onDateSelect={setSelectedDate}\n      />\n      {spotifyData == null ? (\n        <p>Loading data from Spotify...</p>\n      ) : (\n        <SpotifyTrackData\n          numberOnes={spotifyData}\n          birthdayDate={selectedDate}\n          token={props.callbackParams.accessToken}\n        />\n      )}\n    </CenteredContainer>\n  );\n};\n\nconst SpotifyTrackData = (props: {\n  numberOnes: Array<BirthdayWithSpotifyData>;\n  birthdayDate: Date;\n  token: string;\n}) => (\n  <CenteredContainer>\n    <CreatePlaylistDisplay\n      numberOnes={props.numberOnes}\n      birthdayDate={props.birthdayDate}\n      token={props.token}\n    />\n    <TrackList numberOnes={props.numberOnes} />\n  </CenteredContainer>\n);\n\nconst CreatePlaylistDisplay = (props: {\n  numberOnes: Array<BirthdayWithSpotifyData>;\n  birthdayDate: Date;\n  token: string;\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [playlistUrl, setPlaylistUrl] = useState<string | null>(null);\n  useEffect(() => setPlaylistUrl(null), [props.birthdayDate])\n  const onCreatePlaylist = async () => {\n    setLoading(true);\n    const url = await createPlaylist(\n      `Birthday Playlist (${props.birthdayDate.toLocaleDateString()})`,\n      props.numberOnes,\n      props.token\n    );\n    setLoading(false);\n    setPlaylistUrl(url);\n  };\n  return (\n    <div>\n      {loading ? (\n        <p>Creating playlist on Spotify...</p>\n      ) : !playlistUrl ? (\n        <button onClick={onCreatePlaylist}>Create playlist on Spotify</button>\n      ) : (\n        <a href={playlistUrl}>Checkout your Birthday Playlist on Spotify</a>\n      )}\n    </div>\n  );\n};\n\nconst Result = styled.div`\n  text-align: center;\n`;\n\nconst TrackList = (props: { numberOnes: Array<BirthdayWithSpotifyData> }) => (\n  <div>\n    {props.numberOnes.map((birthdayEntry) => (\n      <Result key={birthdayEntry.birthday.date.toLocaleString()}>\n        <h4>{birthdayEntry.birthday.date.toLocaleString()}</h4>\n        {birthdayEntry.birthday.numberOne ? (\n          birthdayEntry.spotifyTrack ? (\n            <TrackSpotifyDetails track={birthdayEntry.spotifyTrack} />\n          ) : (\n            <CouldNotFindTrack track={birthdayEntry.birthday.numberOne} />\n          )\n        ) : birthdayEntry.birthday.reason === NoDataReason.DATE_TOO_OLD ? (\n          <p>UK Charts only started on 08/11/1952</p>\n        ) : (\n          <p>The latest chart data hasn't been updated yet, try again soon!</p>\n        )}\n      </Result>\n    ))}\n  </div>\n);\n\nconst TrackSpotifyDetails = (props: { track: SpotifyTrack }) => (\n  <SpotifyTrackInfo>\n    <img\n      src={props.track.album.images.find((img) => img.height === 64)?.url}\n      alt={`${props.track.album.name} cover`}\n    />\n    <p>\n      {props.track.name}\n      <br />\n      {props.track.artists.map((artist) => artist.name).join(\", \")}\n    </p>\n  </SpotifyTrackInfo>\n);\n\nconst SpotifyTrackInfo = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CouldNotFindTrack = (props: { track: ChartEntry }) => (\n  <p>\n    Could not find {props.track.title} by {props.track.artist} on Spotify\n  </p>\n);\n\ntype SuccessCallbackParams = {\n  accessToken: string;\n  state: string;\n};\n\nexport default SpotifyLoggedIn;\n","import React from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport SpotifyLoggedIn from \"./SpotifyLoggedIn\";\n\nconst App = () => (\n  <HashRouter>\n    <Switch>\n      <Route path=\"/:access_token\">\n        <SpotifyLoggedIn />\n      </Route>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}