{"version":3,"sources":["ChartData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NoDataReason","findBirthdayNumberOne","birthday","chartData","chartEntryBeforeBirthday","findLast","entry","firstWeekEndDate","minus","weeks","undefined","date","numberOne","reason","DATE_TOO_OLD","plus","weeksAtNumberOne","NO_DATA_YET","NumberOnesList","props","birthdayNumberOnes","map","birthdayEntry","Result","key","toLocaleString","title","artist","AppContainer","styled","div","SubmitButton","button","ResultsContainer","App","useState","Date","birthdayDate","setBirthdayDate","setChartData","setBirthdayNumberOnes","useEffect","a","fetch","then","response","json","incomingEntries","DateTime","fromISO","first_week_ending_date","Number","weeks_at_number_one","data","fetchData","selected","onChange","dateFormat","minDate","maxDate","showMonthDropdown","showYearDropdown","dropdownMode","disabled","onClick","Interval","fromDateTimes","fromJSDate","local","splitBy","years","interval","start","findBirthdayNumberOnes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uGAyCYA,E,4GAAAA,O,6BAAAA,I,gCAAAA,M,KAKL,IAQDC,EAAwB,SAC5BC,EACAC,GAEA,IAAMC,EAA2BC,mBAC/BF,GACA,SAACG,GAAD,OAAWA,EAAMC,iBAAiBC,MAAM,CAAEC,MAAO,KAAQP,KAE3D,YAAiCQ,IAA7BN,EACK,CACLO,KAAMT,EACNU,UAAW,KACXC,OAAQb,EAAac,cAGvBZ,GACAE,EAAyBG,iBAAiBQ,KAAK,CAC7CN,MAAOL,EAAyBY,iBAAmB,IAG9C,CACLL,KAAMT,EACNU,UAAW,KACXC,OAAQb,EAAaiB,aAGhB,CACLN,KAAMT,EACNU,UAAWR,EACXS,OAAQ,O,igBCtEd,IAuDMK,EAAiB,SAACC,GAAD,OACrB,6BACGA,EAAMC,mBAAmBC,KAAI,SAACC,GAAD,OAC5B,kBAACC,EAAD,CAAQC,IAAKF,EAAcX,KAAKc,kBAC9B,4BAAKH,EAAcX,KAAKc,kBACvBH,EAAcV,UACb,2BACGU,EAAcV,UAAUc,MAD3B,OACsCJ,EAAcV,UAAUe,QAE5DL,EAAcT,SAAWb,EAAac,aACxC,mEAEA,mGAOJc,EAAeC,IAAOC,IAAV,KAOZC,EAAeF,IAAOG,OAAV,KAIZC,EAAmBJ,IAAOC,IAAV,KAMhBP,EAASM,IAAOC,IAAV,KAIGI,EA/FH,WAAO,IAAD,EACwBC,mBAAS,IAAIC,MADrC,mBACTC,EADS,KACKC,EADL,OAEkBH,mBAA2B,MAF7C,mBAEThC,EAFS,KAEEoC,EAFF,OAMZJ,mBAAoC,MANxB,mBAIdf,EAJc,KAKdoB,EALc,KAehB,OARAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEDCpBC,MAnBiB,4DAoBdC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJA,EAAgB1B,KAAI,SAACf,GAAD,MAAgC,CAClDC,iBAAkByC,WAASC,QAAQ3C,EAAM4C,wBACzCxB,MAAOpB,EAAMoB,MACbC,OAAQrB,EAAMqB,OACdX,iBAAkBmC,OAAO7C,EAAM8C,4BCRjB,OACVC,EADU,OAEhBd,EAAac,GAFG,2CAAH,qDAIfC,KACC,IAGD,kBAAC1B,EAAD,KACE,2DACA,mJAKA,0DACA,kBAAC,IAAD,CACE2B,SAAUlB,EACVmB,SAAU,SAAC7C,GAAD,OACD2B,EAAP3B,GAA+C,IAAIyB,OAErDqB,WAAW,aACXC,QAAS,IAAItB,KAAK,KAAM,EAAG,GAC3BuB,QAAS,IAAIvB,KACbwB,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,WAEf,kBAAC/B,EAAD,CACEgC,SAAuB,MAAb5D,EACV6D,QAAS,kBACP7D,GACAqC,EDP4B,SACpCH,EACAlC,GAFoC,OAIpC8D,WAASC,cAAclB,WAASmB,WAAW9B,GAAeW,WAASoB,SAChEC,QAAQ,CAAEC,MAAO,IACjBjD,KAAI,SAACkD,GAAD,OAActE,EAAsBsE,EAASC,MAAOrE,MCC7BsE,CAAuBpC,EAAclC,MAJ/D,sBASCiB,GACC,kBAACa,EAAD,KACE,+DACA,kBAAC,EAAD,CAAgBb,mBAAoBA,OCjD1BsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cb483927.chunk.js","sourcesContent":["import { findLast } from \"lodash\";\nimport { DateTime, Interval } from \"luxon\";\n\nconst JsonBinUrl = \"https://api.jsonbin.io/b/5ecfe1657741ef56a5638007/latest\";\n\ntype IncomingChartEntry = {\n  first_week_ending_date: string;\n  title: string;\n  artist: string;\n  weeks_at_number_one: string;\n};\n\nexport interface ChartEntry {\n  firstWeekEndDate: DateTime;\n  title: string;\n  artist: string;\n  weeksAtNumberOne: number;\n}\n\nexport type ChartData = Array<ChartEntry>;\n\nexport const getChartData: () => Promise<ChartData> = () =>\n  fetch(JsonBinUrl)\n    .then((response) => response.json())\n    .then((incomingEntries) =>\n      incomingEntries.map((entry: IncomingChartEntry) => ({\n        firstWeekEndDate: DateTime.fromISO(entry.first_week_ending_date),\n        title: entry.title,\n        artist: entry.artist,\n        weeksAtNumberOne: Number(entry.weeks_at_number_one),\n      }))\n    );\n\nexport type BirthdayNumberOnes = Array<Birthday>;\n\nexport type Birthday = {\n  date: DateTime;\n  numberOne: ChartEntry | null;\n  reason: NoDataReason | null;\n};\n\nexport enum NoDataReason {\n  NO_DATA_YET,\n  DATE_TOO_OLD,\n}\n\nexport const findBirthdayNumberOnes = (\n  birthdayDate: Date,\n  chartData: ChartData\n): BirthdayNumberOnes =>\n  Interval.fromDateTimes(DateTime.fromJSDate(birthdayDate), DateTime.local())\n    .splitBy({ years: 1 })\n    .map((interval) => findBirthdayNumberOne(interval.start, chartData));\n\nconst findBirthdayNumberOne = (\n  birthday: DateTime,\n  chartData: ChartData\n): Birthday => {\n  const chartEntryBeforeBirthday = findLast(\n    chartData,\n    (entry) => entry.firstWeekEndDate.minus({ weeks: 1 }) <= birthday // Date is first week end, so subtract 1 week to get beginning\n  );\n  if (chartEntryBeforeBirthday === undefined) {\n    return {\n      date: birthday,\n      numberOne: null,\n      reason: NoDataReason.DATE_TOO_OLD,\n    };\n  } else if (\n    birthday >=\n    chartEntryBeforeBirthday.firstWeekEndDate.plus({\n      weeks: chartEntryBeforeBirthday.weeksAtNumberOne - 1,\n    })\n  ) {\n    return {\n      date: birthday,\n      numberOne: null,\n      reason: NoDataReason.NO_DATA_YET,\n    };\n  } else {\n    return {\n      date: birthday,\n      numberOne: chartEntryBeforeBirthday,\n      reason: null,\n    };\n  }\n};\n","import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\nimport {\n  getChartData,\n  ChartData,\n  findBirthdayNumberOnes,\n  BirthdayNumberOnes,\n  NoDataReason,\n} from \"./ChartData\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  const [birthdayDate, setBirthdayDate] = useState(new Date());\n  const [chartData, setChartData] = useState<ChartData | null>(null);\n  const [\n    birthdayNumberOnes,\n    setBirthdayNumberOnes,\n  ] = useState<BirthdayNumberOnes | null>(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await getChartData();\n      setChartData(data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <AppContainer>\n      <h1>Birthday Playlist Generator</h1>\n      <p>\n        Generate a Spotify playlist of UK number ones on your Birthday since you\n        were born. This site is a work in progress.\n      </p>\n\n      <h3>Enter your birthday below:</h3>\n      <DatePicker\n        selected={birthdayDate}\n        onChange={(date) =>\n          date ? setBirthdayDate(date) : setBirthdayDate(new Date())\n        }\n        dateFormat=\"dd/MM/yyyy\"\n        minDate={new Date(1900, 0, 1)}\n        maxDate={new Date()}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n      />\n      <SubmitButton\n        disabled={chartData == null}\n        onClick={() =>\n          chartData &&\n          setBirthdayNumberOnes(findBirthdayNumberOnes(birthdayDate, chartData))\n        }\n      >\n        Find me a playlist\n      </SubmitButton>\n      {birthdayNumberOnes && (\n        <ResultsContainer>\n          <p>Spotify integration coming soon!</p>\n          <NumberOnesList birthdayNumberOnes={birthdayNumberOnes} />\n        </ResultsContainer>\n      )}\n    </AppContainer>\n  );\n};\n\nconst NumberOnesList = (props: { birthdayNumberOnes: BirthdayNumberOnes }) => (\n  <div>\n    {props.birthdayNumberOnes.map((birthdayEntry) => (\n      <Result key={birthdayEntry.date.toLocaleString()}>\n        <h4>{birthdayEntry.date.toLocaleString()}</h4>\n        {birthdayEntry.numberOne ? (\n          <p>\n            {birthdayEntry.numberOne.title} by {birthdayEntry.numberOne.artist}\n          </p>\n        ) : birthdayEntry.reason === NoDataReason.DATE_TOO_OLD ? (\n          <p>UK Charts only started on 14/11/1952</p>\n        ) : (\n          <p>The latest chart data hasn't been updated yet, try again soon!</p>\n        )}\n      </Result>\n    ))}\n  </div>\n);\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst SubmitButton = styled.button`\n  margin: 10px;\n`;\n\nconst ResultsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Result = styled.div`\n  text-align: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}